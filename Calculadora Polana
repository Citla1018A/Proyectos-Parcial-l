/**
 *
 * @author Citlalli
 */
public class Main {
     public static void main(String[] args){

        
     Archivo archivo = new Archivo();
        archivo.leerArchivo();
        String[] expresiones= archivo.leerArchivo();
        for (int i = 0; i < expresiones.length; i++) {
            System.out.println(expresiones[i]);
            e.evalua(expresiones[i]);
        }
       
    }

}
public class NodoStack {
     char dato;
    NodoStack siguiente;
}
public class Cola {
      NodoCola inicio=null;
    NodoCola fin=null;
    
    void queue(char dato){
        NodoCola nuevo= new NodoCola();
        nuevo.dato=dato;
        nuevo.siguiente=null;
        nuevo.anterior=null;
        if(inicio!=null){
            inicio.anterior=nuevo;
            nuevo.siguiente=inicio;
         //   System.out.println("insertando despues de un elemento");
        }else{
          //  System.out.println("insertando primer elemento");
            inicio=nuevo;
            fin=nuevo;
        }
    }
    
    char dequeue(){
        char letra;
        if(fin!=null){
            NodoCola aux=fin;
            
            if(inicio==fin){
                inicio=null;
             
                fin=null;
            }else{
                fin=fin.anterior;
                fin.siguiente=null;
            }
            aux.siguiente=null;
            aux.anterior=null;
            letra=aux.dato;
        }else{
            letra=0;
        }
        return letra;
    }
}
public class NodoCola {
      char dato;
    NodoCola siguiente;
    NodoCola anterior;
}
public class NodoApilar {
    char dato;
    NodoApilar siguiente;
}
public class Shuttingyard {
    
    Queue salida=new Queue();
    Stack pila=new Stack();
    
    Queue stringtoChars(String string){ 
        Queue cola= new Queue(); 
        for (int i = 0; i < string.length(); i++) {
         
            cola.queue(string.charAt(i));
        }
        return cola;
    }
    
    boolean isLetra(char caracter){ 

        if(caracter=='+'||caracter=='-'||caracter=='/'||caracter=='^'||caracter=='*'||caracter=='('||caracter==')'){
            return false;
        }else{
            return true;
            }
        
    }
    int peso(char signo){
        switch(signo){
            case '+':
            case '-':
                return 1;
            case '/':
            case '*':
                return 2;
            case '^':
                return 3;
            case '(':
                return 4;
         
            case ')':
                return 0;
            default:
                return -1;
        }
    }
    boolean isAfuerMayorDentro(char dentro, char afuera){
        return peso(afuera)>peso(dentro);
    }
    
    void evalua(String expresion){
        Queue entrada=stringtoChars(expresion); 
        Queue salida= new Queue();
        Stack pila=new Stack(); 
        char caracter;
        int cont=0;
        
       while((caracter=entrada.dequeue())!=0){
           System.out.println("dequeue "+caracter);
           System.out.println("contador "+cont);
            if(isLetra(caracter)){
                salida.queue(caracter);
            }else{
               System.out.println("entra");
                if(pila.isPilaVacia()){
                    pila.push(caracter);
                }else{
                    if(peso(caracter)==0){
                        char c;
                        while((c=pila.pop())!='('){
                            salida.queue(c); 
                        }   
                        
                    }else{
                        char signo=pila.pop();
                    if(signo=='('){
                        pila.push(signo);
                        pila.push(caracter);
                        pila.imprimir();
                    }else{
                        
                        if(isAfuerMayorDentro(signo, caracter)){
                            pila.push(signo);
                            pila.push(caracter);
                            pila.imprimir(); 
                        }else{
                            salida.queue(signo);
                            pila.push(caracter);
                            pila.imprimir();
                        }
                    }
                    }
                }
            }
            cont++;
        }
        while((caracter=pila.pop())!=0){
            salida.queue(caracter); 
        }
        while((caracter= salida.dequeue())!=0){
            System.out.print(caracter);
        }
        
    }
}
public class Apilar {
   NodoStack inicio;
    
    void push(char dato){
        NodoStack nuevo=new NodoStack();
        nuevo.dato=dato;
        nuevo.siguiente=null;
        if(inicio!=null){
            nuevo.siguiente=inicio;
        }
        inicio=nuevo;
    }
    
    char pop(){
        if(inicio!=null){
             NodoStack aux=inicio;
             inicio=inicio.siguiente;
             aux.siguiente=null;
             return aux.dato;
        }
        return 0;
    }
    
    boolean isPilaVacia(){
      return inicio == null;
    }
    //return inicio=null;
    
    void imprimir(){
        NodoStack aux=inicio;
        System.out.println("PILA");
        while(aux!=null){
            System.out.println(aux.dato);
            aux=aux.siguiente;
        }
    }
 
}
public class Apilar {
   NodoStack inicio;
    
    void push(char dato){
        NodoStack nuevo=new NodoStack();
        nuevo.dato=dato;
        nuevo.siguiente=null;
        if(inicio!=null){
            nuevo.siguiente=inicio;
        }
        inicio=nuevo;
    }
    
    char pop(){
        if(inicio!=null){
             NodoStack aux=inicio;
             inicio=inicio.siguiente;
             aux.siguiente=null;
             return aux.dato;
        }
        return 0;
    }
    
    boolean isPilaVacia(){
      return inicio == null;
    }
    //return inicio=null;
    
    void imprimir(){
        NodoStack aux=inicio;
        System.out.println("PILA");
        while(aux!=null){
            System.out.println(aux.dato);
            aux=aux.siguiente;
        }
    }
 
}
public class Apilar {
   NodoStack inicio;
    
    void push(char dato){
        NodoStack nuevo=new NodoStack();
        nuevo.dato=dato;
        nuevo.siguiente=null;
        if(inicio!=null){
            nuevo.siguiente=inicio;
        }
        inicio=nuevo;
    }char pop(){ if(inicio!=null){
             NodoStack aux=inicio;
             inicio=inicio.siguiente;
             aux.siguiente=null;
             return aux.dato;
        }    return 0;
    }boolean isPilaVacia(){
      return inicio == null;
    } void imprimir(){
        NodoStack aux=inicio;
        System.out.println("PILA");
        while(aux!=null){
            System.out.println(aux.dato);
            aux=aux.siguiente;} } }
            public class Apilar {
   NodoStack inicio;
    
    void push(char dato){
        NodoStack nuevo=new NodoStack();
        nuevo.dato=dato;
        nuevo.siguiente=null;
        if(inicio!=null){
            nuevo.siguiente=inicio;
        }
        inicio=nuevo;
    }
    
    char pop(){
        if(inicio!=null){
             NodoStack aux=inicio;
             inicio=inicio.siguiente;
             aux.siguiente=null;
             return aux.dato;
        }
        return 0;
    }
    
    boolean isPilaVacia(){
      return inicio == null;
    }
    //return inicio=null;
    
    void imprimir(){
        NodoStack aux=inicio;
        System.out.println("PILA");
        while(aux!=null){
            System.out.println(aux.dato);
            aux=aux.siguiente;
        }
    
    }}



